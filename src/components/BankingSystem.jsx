import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card.jsx';
import { Button } from '@/components/ui/button.jsx';
import { Badge } from '@/components/ui/badge.jsx';
import { Progress } from '@/components/ui/progress.jsx';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs.jsx';
import { Input } from '@/components/ui/input.jsx';
import { Label } from '@/components/ui/label.jsx';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from '@/components/ui/dialog.jsx';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table.jsx';
import { 
  Banknote, 
  TrendingUp, 
  TrendingDown, 
  CreditCard, 
  PiggyBank,
  Building2,
  ArrowUpDown,
  Plus,
  Minus,
  DollarSign,
  Percent,
  Calendar,
  Shield,
  AlertTriangle,
  CheckCircle,
  Eye,
  EyeOff
} from 'lucide-react';
import { useGame } from '../hooks/useGame.js';
import { 
  BankAccountTypes, 
  BankAccountLabels,
  StockSectors,
  StockSectorLabels,
  LoanTypes,
  LoanTypeLabels,
  DepositTypes,
  DepositTypeLabels,
  stocksData,
  loanOffers,
  depositOffers,
  bankingHelpers 
} from '../types/banking.js';

const BankingSystem = () => {
  const { gameState, actions } = useGame();
  const [_selectedStock, setSelectedStock] = useState(null);
  const [stockQuantity, setStockQuantity] = useState(0);
  const [transferAmount, setTransferAmount] = useState(0);
  const [transferFrom, setTransferFrom] = useState('');
  const [transferTo, setTransferTo] = useState('');
  const [showPersonalAccounts, setShowPersonalAccounts] = useState(false);
  const [depositAmounts, setDepositAmounts] = useState({});

  const bankingState = gameState.bankingState || {};
  const accounts = bankingState.accounts || {};
  const stockPortfolio = bankingState.stockPortfolio || { city: {}, personal: {} };
  const deposits = bankingState.deposits || [];
  const loans = bankingState.loans || [];

  const getSectorIcon = (sector) => {
    const icons = {
      [StockSectors.ENERGY]: '‚ö°',
      [StockSectors.TECHNOLOGY]: 'üíª',
      [StockSectors.FINANCE]: 'üè¶',
      [StockSectors.INDUSTRY]: 'üè≠',
      [StockSectors.REAL_ESTATE]: 'üè¢',
      [StockSectors.AGRICULTURE]: 'üåæ',
      [StockSectors.TRANSPORT]: 'üöõ',
      [StockSectors.RETAIL]: 'üõí'
    };
    return icons[sector] || 'üìà';
  };

  const getAccountTypeColor = (accountType) => {
    if (accountType.includes('city')) return 'bg-blue-100 text-blue-800';
    if (accountType.includes('personal')) return 'bg-green-100 text-green-800';
    if (accountType.includes('offshore')) return 'bg-yellow-100 text-yellow-800';
    return 'bg-gray-100 text-gray-800';
  };

  const handleBuyStock = (stockId, quantity, isPersonal = false) => {
    const stock = stocksData.find(s => s.id === stockId);
    if (!stock) return;

    const totalCost = stock.price * quantity;
    const commission = bankingHelpers.calculateCommission(totalCost, 'stock_buy');
    const accountType = isPersonal ? BankAccountTypes.PERSONAL_INVESTMENT : BankAccountTypes.CITY_INVESTMENT;
    
    actions.buyStock(stockId, quantity, stock.price, accountType, commission);
    setStockQuantity(0);
    setSelectedStock(null);
  };

  const handleTransfer = () => {
    if (transferAmount > 0 && transferFrom && transferTo && transferFrom !== transferTo) {
      actions.transferFunds(transferFrom, transferTo, transferAmount);
      setTransferAmount(0);
      setTransferFrom('');
      setTransferTo('');
    }
  };

  const handleTakeLoan = (loanId) => {
    actions.takeLoan(loanId);
  };

  const handleCreateDeposit = (depositId) => {
    const offer = depositOffers.find(deposit => deposit.id === depositId);
    const rawValue = depositAmounts[depositId];
    const amountValue = rawValue !== undefined && rawValue !== ''
      ? Number(rawValue)
      : (offer ? offer.minAmount : 0);

    actions.createDeposit(depositId, amountValue);
  };

  const totalCityBalance = bankingHelpers.getTotalBalance(accounts, null);
  const cityPortfolioValue = bankingHelpers.getPortfolioValue(stockPortfolio.city, stocksData);
  const personalPortfolioValue = bankingHelpers.getPortfolioValue(stockPortfolio.personal, stocksData);
  const totalLoansAmount = loans.reduce((sum, loan) => sum + loan.remainingAmount, 0);
  const totalDepositsAmount = deposits.reduce((sum, deposit) => sum + deposit.amount, 0);

  return (
    <div className="space-y-6">
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <div>
          <h2 className="text-2xl font-bold">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞</h2>
          <p className="text-gray-600">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –∏ –∫—Ä–µ–¥–∏—Ç–∞–º–∏
          </p>
        </div>
        
        <div className="flex items-center gap-4">
          <Button
            variant={showPersonalAccounts ? "destructive" : "outline"}
            size="sm"
            onClick={() => setShowPersonalAccounts(!showPersonalAccounts)}
            className="flex items-center gap-2"
          >
            {showPersonalAccounts ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
            {showPersonalAccounts ? '–°–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–µ —Å—á–µ—Ç–∞' : '–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–µ —Å—á–µ—Ç–∞'}
          </Button>
        </div>
      </div>

      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</p>
                <p className="text-2xl font-bold">{bankingHelpers.formatMoney(totalCityBalance)}</p>
              </div>
              <Banknote className="w-8 h-8 text-blue-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</p>
                <p className="text-2xl font-bold text-green-600">
                  {bankingHelpers.formatMoney(cityPortfolioValue + personalPortfolioValue)}
                </p>
              </div>
              <TrendingUp className="w-8 h-8 text-green-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">–î–µ–ø–æ–∑–∏—Ç—ã</p>
                <p className="text-2xl font-bold text-blue-600">
                  {bankingHelpers.formatMoney(totalDepositsAmount)}
                </p>
              </div>
              <PiggyBank className="w-8 h-8 text-blue-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">–ö—Ä–µ–¥–∏—Ç—ã</p>
                <p className="text-2xl font-bold text-red-600">
                  -{bankingHelpers.formatMoney(totalLoansAmount)}
                </p>
              </div>
              <CreditCard className="w-8 h-8 text-red-600" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="accounts" className="space-y-6">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="accounts">–°—á–µ—Ç–∞</TabsTrigger>
          <TabsTrigger value="stocks">–ê–∫—Ü–∏–∏</TabsTrigger>
          <TabsTrigger value="deposits">–î–µ–ø–æ–∑–∏—Ç—ã</TabsTrigger>
          <TabsTrigger value="loans">–ö—Ä–µ–¥–∏—Ç—ã</TabsTrigger>
          <TabsTrigger value="transfers">–ü–µ—Ä–µ–≤–æ–¥—ã</TabsTrigger>
        </TabsList>

        {/* –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞ */}
        <TabsContent value="accounts" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {Object.entries(accounts)
              .filter(([type]) => showPersonalAccounts || !type.includes('personal'))
              .map(([accountType, account]) => (
                <Card key={accountType} className="hover:shadow-md transition-shadow">
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Building2 className="w-5 h-5" />
                        {BankAccountLabels[accountType]}
                      </div>
                      <Badge className={getAccountTypeColor(accountType)}>
                        {account.bank}
                      </Badge>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="text-center">
                      <div className="text-3xl font-bold">
                        {bankingHelpers.formatMoney(account.balance, account.currency)}
                      </div>
                      <div className="text-sm text-gray-500">
                        –°—á–µ—Ç: {account.accountNumber}
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <div className="text-gray-500">–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞</div>
                        <div className="font-semibold">{account.interestRate}% –≥–æ–¥–æ–≤—ã—Ö</div>
                      </div>
                      <div>
                        <div className="text-gray-500">–¢–∏–ø —Å—á–µ—Ç–∞</div>
                        <div className="font-semibold">
                          {accountType.includes('checking') ? '–†–∞—Å—á–µ—Ç–Ω—ã–π' :
                           accountType.includes('savings') ? '–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π' :
                           accountType.includes('investment') ? '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π' : '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π'}
                        </div>
                      </div>
                    </div>

                    {account.interestRate > 0 && (
                      <div className="pt-3 border-t">
                        <div className="text-sm text-gray-600">
                          –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: {bankingHelpers.formatMoney(
                            account.balance * account.interestRate / 100 / 12,
                            account.currency
                          )}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
          </div>
        </TabsContent>

        {/* –ê–∫—Ü–∏–∏ */}
        <TabsContent value="stocks" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ü–∏–∏ */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ü–∏–∏</h3>
              <div className="space-y-3">
                {stocksData.map((stock) => (
                  <Card key={stock.id} className="hover:shadow-md transition-shadow">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <span className="text-lg">{getSectorIcon(stock.sector)}</span>
                          <div>
                            <div className="font-semibold">{stock.name}</div>
                            <div className="text-sm text-gray-500">{stock.ticker}</div>
                          </div>
                        </div>
                        <Badge variant="outline">
                          {StockSectorLabels[stock.sector]}
                        </Badge>
                      </div>
                      
                      <div className="grid grid-cols-3 gap-4 text-sm mb-3">
                        <div>
                          <div className="text-gray-500">–¶–µ–Ω–∞</div>
                          <div className="font-semibold">{bankingHelpers.formatMoney(stock.price)}</div>
                        </div>
                        <div>
                          <div className="text-gray-500">–ò–∑–º–µ–Ω–µ–Ω–∏–µ</div>
                          <div className={`font-semibold ${stock.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                            {stock.changePercent >= 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%
                          </div>
                        </div>
                        <div>
                          <div className="text-gray-500">–î–∏–≤–∏–¥–µ–Ω–¥—ã</div>
                          <div className="font-semibold">{stock.dividend}%</div>
                        </div>
                      </div>

                      <Dialog>
                        <DialogTrigger asChild>
                          <Button 
                            size="sm" 
                            className="w-full"
                            onClick={() => setSelectedStock(stock)}
                          >
                            –ö—É–ø–∏—Ç—å –∞–∫—Ü–∏–∏
                          </Button>
                        </DialogTrigger>
                        <DialogContent>
                          <DialogHeader>
                            <DialogTitle>–ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π {stock.name}</DialogTitle>
                            <DialogDescription>
                              {stock.description}
                            </DialogDescription>
                          </DialogHeader>
                          <div className="space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                              <div>
                                <Label htmlFor="quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</Label>
                                <Input
                                  id="quantity"
                                  type="number"
                                  value={stockQuantity}
                                  onChange={(e) => setStockQuantity(Number(e.target.value))}
                                  placeholder="0"
                                />
                              </div>
                              <div>
                                <Label>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</Label>
                                <div className="p-2 border rounded-md bg-gray-50">
                                  {bankingHelpers.formatMoney(stock.price * stockQuantity)}
                                </div>
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-2 gap-4 text-sm">
                              <div>
                                <div className="text-gray-500">–ö–æ–º–∏—Å—Å–∏—è</div>
                                <div className="font-semibold">
                                  {bankingHelpers.formatMoney(
                                    bankingHelpers.calculateCommission(stock.price * stockQuantity, 'stock_buy')
                                  )}
                                </div>
                              </div>
                              <div>
                                <div className="text-gray-500">–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ</div>
                                <div className="font-semibold">
                                  {bankingHelpers.formatMoney(
                                    stock.price * stockQuantity + 
                                    bankingHelpers.calculateCommission(stock.price * stockQuantity, 'stock_buy')
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                          <DialogFooter>
                            <div className="flex gap-2 w-full">
                              <Button 
                                onClick={() => handleBuyStock(stock.id, stockQuantity, false)}
                                disabled={stockQuantity <= 0}
                                className="flex-1"
                              >
                                –ö—É–ø–∏—Ç—å (–ì–æ—Ä–æ–¥—Å–∫–æ–π —Å—á–µ—Ç)
                              </Button>
                              {showPersonalAccounts && (
                                <Button 
                                  onClick={() => handleBuyStock(stock.id, stockQuantity, true)}
                                  disabled={stockQuantity <= 0}
                                  variant="outline"
                                  className="flex-1"
                                >
                                  –ö—É–ø–∏—Ç—å (–õ–∏—á–Ω—ã–π —Å—á–µ—Ç)
                                </Button>
                              )}
                            </div>
                          </DialogFooter>
                        </DialogContent>
                      </Dialog>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* –ü–æ—Ä—Ç—Ñ–µ–ª—å */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">–ü–æ—Ä—Ç—Ñ–µ–ª—å –∞–∫—Ü–∏–π</h3>
              
              {/* –ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Building2 className="w-5 h-5" />
                    –ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {Object.keys(stockPortfolio.city).length > 0 ? (
                    <div className="space-y-3">
                      {Object.entries(stockPortfolio.city).map(([stockId, data]) => {
                        const stock = stocksData.find(s => s.id === stockId);
                        if (!stock || !data.quantity) return null;
                        
                        const currentValue = stock.price * data.quantity;
                        const purchaseValue = data.averagePrice * data.quantity;
                        const profit = currentValue - purchaseValue;
                        const profitPercent = (profit / purchaseValue) * 100;
                        
                        return (
                          <div key={stockId} className="flex items-center justify-between p-3 border rounded-lg">
                            <div>
                              <div className="font-semibold">{stock.name}</div>
                              <div className="text-sm text-gray-500">
                                {data.quantity} —à—Ç. √ó {bankingHelpers.formatMoney(stock.price)}
                              </div>
                            </div>
                            <div className="text-right">
                              <div className="font-semibold">{bankingHelpers.formatMoney(currentValue)}</div>
                              <div className={`text-sm ${profit >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                {profit >= 0 ? '+' : ''}{bankingHelpers.formatMoney(profit)} 
                                ({profitPercent >= 0 ? '+' : ''}{profitPercent.toFixed(2)}%)
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* –õ–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å */}
              {showPersonalAccounts && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <DollarSign className="w-5 h-5" />
                      –õ–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {Object.keys(stockPortfolio.personal).length > 0 ? (
                      <div className="space-y-3">
                        {Object.entries(stockPortfolio.personal).map(([stockId, data]) => {
                          const stock = stocksData.find(s => s.id === stockId);
                          if (!stock || !data.quantity) return null;
                          
                          const currentValue = stock.price * data.quantity;
                          const purchaseValue = data.averagePrice * data.quantity;
                          const profit = currentValue - purchaseValue;
                          const profitPercent = (profit / purchaseValue) * 100;
                          
                          return (
                            <div key={stockId} className="flex items-center justify-between p-3 border rounded-lg">
                              <div>
                                <div className="font-semibold">{stock.name}</div>
                                <div className="text-sm text-gray-500">
                                  {data.quantity} —à—Ç. √ó {bankingHelpers.formatMoney(stock.price)}
                                </div>
                              </div>
                              <div className="text-right">
                                <div className="font-semibold">{bankingHelpers.formatMoney(currentValue)}</div>
                                <div className={`text-sm ${profit >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                  {profit >= 0 ? '+' : ''}{bankingHelpers.formatMoney(profit)} 
                                  ({profitPercent >= 0 ? '+' : ''}{profitPercent.toFixed(2)}%)
                                </div>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    ) : (
                      <div className="text-center py-8 text-gray-500">
                        –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç
                      </div>
                    )}
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        </TabsContent>

        {/* –î–µ–ø–æ–∑–∏—Ç—ã */}
        <TabsContent value="deposits" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã</h3>
              <div className="space-y-3">
                {depositOffers.map((deposit) => (
                  <Card key={deposit.id} className="hover:shadow-md transition-shadow">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <div>
                          <div className="font-semibold">{deposit.bank}</div>
                          <div className="text-sm text-gray-500">{DepositTypeLabels[deposit.type]}</div>
                        </div>
                        <Badge variant="outline">
                          {deposit.interestRate}% –≥–æ–¥–æ–≤—ã—Ö
                        </Badge>
                      </div>
                      
                      <p className="text-sm text-gray-600 mb-3">{deposit.description}</p>
                      
                      <div className="grid grid-cols-2 gap-4 text-sm mb-3">
                        <div>
                          <div className="text-gray-500">–°—Ä–æ–∫</div>
                          <div className="font-semibold">{deposit.term} –º–µ—Å.</div>
                        </div>
                        <div>
                          <div className="text-gray-500">–ú–∏–Ω. —Å—É–º–º–∞</div>
                          <div className="font-semibold">{bankingHelpers.formatMoney(deposit.minAmount)}</div>
                        </div>
                      </div>

                      <div className="space-y-2 mb-3">
                        {deposit.features.map((feature, index) => (
                          <div key={index} className="flex items-center gap-2 text-sm">
                            <CheckCircle className="w-4 h-4 text-green-600" />
                            <span>{feature}</span>
                          </div>
                        ))}
                      </div>

                      <Dialog>
                        <DialogTrigger asChild>
                          <Button size="sm" className="w-full">
                            –û—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç
                          </Button>
                        </DialogTrigger>
                        <DialogContent>
                          <DialogHeader>
                            <DialogTitle>–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞</DialogTitle>
                            <DialogDescription>
                              {deposit.description}
                            </DialogDescription>
                          </DialogHeader>
                          <div className="space-y-4">
                            <div>
                              <Label htmlFor="deposit-amount">–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞</Label>
                              <Input
                                id={`deposit-amount-${deposit.id}`}
                                type="number"
                                value={depositAmounts[deposit.id] ?? deposit.minAmount.toString()}
                                onChange={(e) => setDepositAmounts(prev => ({
                                  ...prev,
                                  [deposit.id]: e.target.value
                                }))}
                                placeholder={`–û—Ç ${deposit.minAmount}`}
                              />
                            </div>
                            
                            <div className="grid grid-cols-2 gap-4 text-sm">
                              <div>
                                <div className="text-gray-500">–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</div>
                                <div className="font-semibold">{deposit.interestRate}% –≥–æ–¥–æ–≤—ã—Ö</div>
                              </div>
                              <div>
                                <div className="text-gray-500">–°—Ä–æ–∫</div>
                                <div className="font-semibold">{deposit.term} –º–µ—Å—è—Ü–µ–≤</div>
                              </div>
                            </div>
                          </div>
                          <DialogFooter>
                            <Button onClick={() => handleCreateDeposit(deposit.id)}>
                              –û—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç
                            </Button>
                          </DialogFooter>
                        </DialogContent>
                      </Dialog>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã</h3>
              {deposits.length > 0 ? (
                <div className="space-y-3">
                  {deposits.map((deposit) => (
                    <Card key={deposit.id}>
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between mb-2">
                          <div>
                            <div className="font-semibold">{deposit.bank}</div>
                            <div className="text-sm text-gray-500">
                              –û—Ç–∫—Ä—ã—Ç: {new Date(deposit.openDate).toLocaleDateString('ru-RU')}
                            </div>
                          </div>
                          <Badge variant="outline">
                            {deposit.interestRate}%
                          </Badge>
                        </div>
                        
                        <div className="text-2xl font-bold mb-2">
                          {bankingHelpers.formatMoney(deposit.amount)}
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex justify-between text-sm">
                            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                            <span>{deposit.remainingDays} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å</span>
                          </div>
                          <Progress 
                            value={((deposit.term * 30 - deposit.remainingDays) / (deposit.term * 30)) * 100} 
                          />
                        </div>
                        
                        <div className="mt-3 pt-3 border-t text-sm">
                          <div className="flex justify-between">
                            <span>–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥:</span>
                            <span className="font-semibold text-green-600">
                              +{bankingHelpers.formatMoney(
                                bankingHelpers.calculateDepositReturn(
                                  deposit.amount, 
                                  deposit.interestRate, 
                                  deposit.term
                                )
                              )}
                            </span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <Card>
                  <CardContent className="text-center py-8">
                    <PiggyBank className="w-12 h-12 mx-auto mb-3 text-gray-300" />
                    <div className="text-lg font-medium mb-1">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤</div>
                    <div className="text-sm text-gray-600">
                      –û—Ç–∫—Ä–æ–π—Ç–µ –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        </TabsContent>

        {/* –ö—Ä–µ–¥–∏—Ç—ã */}
        <TabsContent value="loans" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã</h3>
              <div className="space-y-3">
                {loanOffers.map((loan) => {
                  const creditRating = bankingHelpers.checkCreditRating(gameState);
                  const canApply = creditRating >= (loan.requirements.minRating || 0);
                  
                  return (
                    <Card key={loan.id} className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between mb-2">
                          <div>
                            <div className="font-semibold">{loan.bank}</div>
                            <div className="text-sm text-gray-500">{LoanTypeLabels[loan.type]}</div>
                          </div>
                          <Badge variant="outline">
                            {loan.interestRate}% –≥–æ–¥–æ–≤—ã—Ö
                          </Badge>
                        </div>
                        
                        <p className="text-sm text-gray-600 mb-3">{loan.description}</p>
                        
                        <div className="grid grid-cols-2 gap-4 text-sm mb-3">
                          <div>
                            <div className="text-gray-500">–°—É–º–º–∞</div>
                            <div className="font-semibold">{bankingHelpers.formatMoney(loan.amount)}</div>
                          </div>
                          <div>
                            <div className="text-gray-500">–°—Ä–æ–∫</div>
                            <div className="font-semibold">{loan.term} –º–µ—Å.</div>
                          </div>
                        </div>

                        <div className="space-y-2 mb-3">
                          {loan.benefits.map((benefit, index) => (
                            <div key={index} className="flex items-center gap-2 text-sm">
                              <CheckCircle className="w-4 h-4 text-green-600" />
                              <span>{benefit}</span>
                            </div>
                          ))}
                        </div>

                        <div className="mb-3 p-3 bg-gray-50 rounded-lg">
                          <div className="text-sm font-medium mb-2">–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:</div>
                          <div className="text-lg font-bold">
                            {bankingHelpers.formatMoney(
                              bankingHelpers.calculateLoanPayment(loan.amount, loan.interestRate, loan.term)
                            )}
                          </div>
                        </div>

                        <Button 
                          size="sm" 
                          className="w-full"
                          disabled={!canApply}
                          onClick={() => handleTakeLoan(loan.id)}
                        >
                          {canApply ? '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É' : `–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥ ${loan.requirements.minRating}%`}
                        </Button>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </div>

            {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">–ê–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã</h3>
              {loans.length > 0 ? (
                <div className="space-y-3">
                  {loans.map((loan) => (
                    <Card key={loan.id}>
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between mb-2">
                          <div>
                            <div className="font-semibold">{loan.bank}</div>
                            <div className="text-sm text-gray-500">
                              –í–∑—è—Ç: {new Date(loan.issueDate).toLocaleDateString('ru-RU')}
                            </div>
                          </div>
                          <Badge variant="outline">
                            {loan.interestRate}%
                          </Badge>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-4 mb-3">
                          <div>
                            <div className="text-sm text-gray-500">–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞</div>
                            <div className="text-xl font-bold text-red-600">
                              {bankingHelpers.formatMoney(loan.remainingAmount)}
                            </div>
                          </div>
                          <div>
                            <div className="text-sm text-gray-500">–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂</div>
                            <div className="text-xl font-bold">
                              {bankingHelpers.formatMoney(loan.monthlyPayment)}
                            </div>
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex justify-between text-sm">
                            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–≥–∞—à–µ–Ω–∏—è</span>
                            <span>{loan.remainingMonths} –º–µ—Å. –æ—Å—Ç–∞–ª–æ—Å—å</span>
                          </div>
                          <Progress 
                            value={((loan.term - loan.remainingMonths) / loan.term) * 100} 
                          />
                        </div>
                        
                        <div className="mt-3 pt-3 border-t">
                          <Button size="sm" variant="outline" className="w-full">
                            –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <Card>
                  <CardContent className="text-center py-8">
                    <CreditCard className="w-12 h-12 mx-auto mb-3 text-gray-300" />
                    <div className="text-lg font-medium mb-1">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤</div>
                    <div className="text-sm text-gray-600">
                      –•–æ—Ä–æ—à–∞—è –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        </TabsContent>

        {/* –ü–µ—Ä–µ–≤–æ–¥—ã */}
        <TabsContent value="transfers" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <ArrowUpDown className="w-5 h-5" />
                –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="transfer-from">–°–æ —Å—á–µ—Ç–∞</Label>
                  <select
                    id="transfer-from"
                    value={transferFrom}
                    onChange={(e) => setTransferFrom(e.target.value)}
                    className="w-full p-2 border rounded-md"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç</option>
                    {Object.entries(accounts)
                      .filter(([type]) => showPersonalAccounts || !type.includes('personal'))
                      .map(([accountType, account]) => (
                        <option key={accountType} value={accountType}>
                          {BankAccountLabels[accountType]} - {bankingHelpers.formatMoney(account.balance)}
                        </option>
                      ))}
                  </select>
                </div>
                <div>
                  <Label htmlFor="transfer-to">–ù–∞ —Å—á–µ—Ç</Label>
                  <select
                    id="transfer-to"
                    value={transferTo}
                    onChange={(e) => setTransferTo(e.target.value)}
                    className="w-full p-2 border rounded-md"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç</option>
                    {Object.entries(accounts)
                      .filter(([type]) => showPersonalAccounts || !type.includes('personal'))
                      .filter(([type]) => type !== transferFrom)
                      .map(([accountType, account]) => (
                        <option key={accountType} value={accountType}>
                          {BankAccountLabels[accountType]} - {bankingHelpers.formatMoney(account.balance)}
                        </option>
                      ))}
                  </select>
                </div>
              </div>
              
              <div>
                <Label htmlFor="transfer-amount">–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞</Label>
                <Input
                  id="transfer-amount"
                  type="number"
                  value={transferAmount}
                  onChange={(e) => setTransferAmount(Number(e.target.value))}
                  placeholder="0"
                />
              </div>
              
              {transferAmount > 0 && transferFrom && transferTo && (
                <div className="p-3 bg-gray-50 rounded-lg">
                  <div className="text-sm">
                    <div className="flex justify-between">
                      <span>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:</span>
                      <span>{bankingHelpers.formatMoney(transferAmount)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>–ö–æ–º–∏—Å—Å–∏—è:</span>
                      <span>{bankingHelpers.formatMoney(
                        bankingHelpers.calculateCommission(transferAmount, 'transfer')
                      )}</span>
                    </div>
                    <div className="flex justify-between font-semibold border-t pt-1 mt-1">
                      <span>–ö —Å–ø–∏—Å–∞–Ω–∏—é:</span>
                      <span>{bankingHelpers.formatMoney(
                        transferAmount + bankingHelpers.calculateCommission(transferAmount, 'transfer')
                      )}</span>
                    </div>
                  </div>
                </div>
              )}
              
              <Button 
                onClick={handleTransfer}
                disabled={!transferAmount || !transferFrom || !transferTo || transferFrom === transferTo}
                className="w-full"
              >
                –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
              </Button>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default BankingSystem;
